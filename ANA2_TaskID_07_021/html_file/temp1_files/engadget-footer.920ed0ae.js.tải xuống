(function() {
    var WIN = window;
    var DOC = document;
    var className = 'engadget-share';
    var windowName = 'engadget_share';

    function findAncestorClass(el, className) {
        if (el.closest) {
            return el.closest('.' + className);
        } else {
            while (el.parentElement && !el.classList.contains(className)) {
                el = el.parentElement;
            }
            return el;
        }
    }

    function initClickHandler() {
        DOC.addEventListener('click', function(e) {
            var target = e.target;

            var sectionTarget = target.classList.contains(className)
                ? target
                : findAncestorClass(target, className);
            var shareLink = sectionTarget && sectionTarget.getAttribute('data-share');
            if (shareLink) {
                WIN.open(shareLink, windowName, 'width=670, height=430');
            }
        });
    }

    function fixedHeaderHandler() {
        var fixedNav = document.getElementById('fixed-nav');
        var drawerToggle = fixedNav.querySelector('.drawer-toggle');
        var search = document.getElementById('search');
        var SCROLL_THRESHOLD = 160;

        function scrollHandler() {
            if (window.scrollY > SCROLL_THRESHOLD) {
                fixedNav.removeAttribute('aria-hidden');
                fixedNav.style.transform = 'translateY(0%)';
                search.style.position = 'fixed';
                search.style.height = '80px';
            } else {
                fixedNav.setAttribute('aria-hidden', true);
                drawerToggle.classList.remove('active');
                fixedNav.style.transform = '';
                search.style.position = '';
                search.style.height = '';
            }
        }

        scrollHandler();

        window.addEventListener('scroll', scrollHandler);
    }

    function clickOnReadMore() {
        var observer = new IntersectionObserver(
            function handleIntersect(entries) {
                if (entries[0].isIntersecting) {
                    var target = entries[0].target;
                    observer.unobserve(target);
                    handleAppendElements(target, function(newTarget) {
                        observer.observe(newTarget);
                    });
                }
            },
            {
                rootMargin: '500px 0px 500px 0px'
            }
        );

        document.body.addEventListener('click', function(e) {
            if (
                !e.target ||
                !e.target.dataset ||
                !e.target.dataset.readMore ||
                // ignore clicking on <a> link
                e.target.tagName === 'A'
            ) {
                return;
            }

            e.preventDefault();

            handleAppendElements(e.target, function(newTarget) {
                observer.observe(newTarget);
            });
        });

        function handleAppendElements(target, callback) {
            var readMoreBtn = target;
            var listEndpoint = target.dataset.readMore;
            var nextPagePayload = target.dataset.readMorePayload;
            var region = target.dataset.region;

            var readMoreBtnWrapper = readMoreBtn.parentElement;
            var listContainer = readMoreBtnWrapper.parentElement;
            listContainer.removeChild(readMoreBtnWrapper);

            var request = new XMLHttpRequest();
            request.responseType = 'text';
            request.open('POST', '/apis/' + listEndpoint + '?region=' + region);
            request.setRequestHeader('Content-Type', 'application/json');
            request.onload = function() {
                var container = document.createElement('div');
                container.innerHTML = this.responseText;
                var nextPageList = container.querySelector('ul').childNodes;

                var nextPageArr = [];
                for (var i = 0; i < nextPageList.length; i += 1) {
                    nextPageArr.push(nextPageList[i]);
                }

                nextPageArr.forEach(function(item) {
                    listContainer.appendChild(item);
                });

                var newTarget = listContainer.querySelector('[data-read-more]');

                if (typeof callback === 'function' && newTarget) {
                    callback(newTarget);
                }
            };
            request.send(nextPagePayload);

            return false;
        }
    }

    DOC.addEventListener('DOMContentLoaded', fixedHeaderHandler);
    DOC.addEventListener('DOMContentLoaded', initClickHandler);
    DOC.addEventListener('DOMContentLoaded', clickOnReadMore);
})();
